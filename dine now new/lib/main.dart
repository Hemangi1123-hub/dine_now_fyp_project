import 'package:dine_now/core/theme/app_theme.dart'; // Import the theme file
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'firebase_options.dart'; // Generated by flutterfire configure
import 'screens/auth/auth_wrapper.dart'; // Import the AuthWrapper
import 'package:firebase_app_check/firebase_app_check.dart'; // Import App Check
import 'package:khalti_checkout_flutter/khalti_checkout_flutter.dart'; // Import Khalti package
import 'dart:developer'; // For logging

// Global Khalti instance variable (can be accessed later)
Khalti? khaltiInstance;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);//initializes firebase using the correct platform-specific options

  // Activate App Check
  await FirebaseAppCheck.instance.activate(
    // Use playIntegrityProvider for Android, deviceCheckProvider for iOS
    androidProvider: AndroidProvider.playIntegrity,
    // You can add appleProvider: AppleProvider.deviceCheck here if needed for iOS
    // webProvider: ReCaptchaV3Provider('YOUR_RECAPTCHA_V3_SITE_KEY'), // If needed for web
  );

  // Khalti Initialization for Sandbox
  // Note: pidx should ideally be generated server-side for each transaction.
  // We are using a dummy one here for demo purposes.
  final pidx =
      'dummy_pidx_for_testing'; // Replace later with server-generated pidx

  final payConfig = KhaltiPayConfig(
    publicKey:
        'test_public_key_dc74e0fd57cb46cd93832aee0a507256', // Sandbox Public Key from docs
    pidx: pidx, // Use the dummy pidx for now
    environment: Environment.test, // Set environment to test (sandbox)
  );

  // Initialize Khalti and store the instance globally
  // Note: Callbacks are defined here but will be triggered when payment is initiated later.
  khaltiInstance = await Khalti.init(
    enableDebugging: true, // Enable debugging for sandbox
    payConfig: payConfig,
    onPaymentResult: (paymentResult, khalti) {
      log('MAIN: Payment Result: ${paymentResult.toString()}');
      // Handle payment result globally or pass to specific screens if needed
      khalti.close(
        navigatorKey.currentContext!,
      ); // Close Khalti interface after result
    },
    onMessage: (
      khalti, {
      description,
      statusCode,
      event,
      needsPaymentConfirmation,
    }) async {
      log(
        'MAIN: Message: Description: $description, Status Code: $statusCode, Event: $event, NeedsPaymentConfirmation: $needsPaymentConfirmation',
      );
      // Handle messages globally or pass to specific screens if needed
      khalti.close(
        navigatorKey.currentContext!,
      ); // Close Khalti interface on message
    },
    onReturn:
        () => log(
          'MAIN: Successfully redirected to return_url.',
        ), // Handle return URL redirection
  );

  runApp(const ProviderScope(child: MyApp()));
}

// Add a GlobalKey for NavigatorState to close Khalti from callbacks
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey, // Assign the navigatorKey
      title: 'Dine Now', // Updated App Title
      theme: lightTheme, // Apply light theme
      darkTheme: darkTheme, // Apply dark theme
      themeMode: ThemeMode.system, // Use system setting (can be changed later)
      debugShowCheckedModeBanner: false,
      home: const AuthWrapper(), // Use AuthWrapper as the home widget
    );
  }
}
